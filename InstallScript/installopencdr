#!/bin/bash

not_implemented(){
	echo "function not implemented yet"
}
download_opencdr(){
	echo "Downloading opencdr"
	cd ~/
    mkdir opencdr
	cd ~/opencdr
	git init
	git remote add origin git://github.com/opencdrrate/OPENCDR.git
	git pull origin master

}
install_git(){
	sudo yum -y install zlib-devel openssl-devel cpio expat-devel gettext-devel make gcc perl-ExtUtils-MakeMaker

	cd /usr/local/src
	sudo wget http://git-core.googlecode.com/files/git-1.7.9.tar.gz
	sudo tar xvzf git-1.7.9.tar.gz

	cd git-1.7.9
	sudo ./configure
	sudo make
	sudo make install
}
install_httpd()
{
	echo "Installing httpd"
	sudo yum -y install httpd
	sudo chkconfig httpd on
	sudo /etc/init.d/httpd start
}
install_postgres()
{
	 echo "Installing postgres"
        #echo "Please follow the instructions at : http://wiki.postgresql.org/wiki/YUM_Installation"
        #check if centos or amazon ec2
        # linux = cat /etc/*-release
        #centos :
        #    On CentOS: /etc/yum.repos.d/CentOS-Base.repo, [base] and [updates] sections
        #       exclude=postgresql*

        cd ~/
		sudo cat /etc/yum.repos.d/CentOS-Base.repo | sed '/\[base\]/ a\exclude=postgresql*' > test && sudo mv test /etc/yum.repos.d/CentOS-Base.repo

        sudo cat /etc/yum.repos.d/CentOS-Base.repo | sed '/\[updates\]/ a\exclude=postgresql*' <test && sudo mv test /etc/yum.repos.d/CentOS-Base.repo

        sudo curl -O http://yum.postgresql.org/8.4/redhat/rhel-5-x86_64/pgdg-centos-8.4-3.noarch.rpm
        rpm -ivh ~/pgdg-centos-8.4-3.noarch.rpm
        sudo yum -y install postgresql-server.x86_64
        sudo service postgresql initdb
        sudo chkconfig postgresql on

        #find the path of pg_hba.conf
        hbapath=`sudo find / -name 'pg_hba.conf'`
        sudo cat $hbapath | sed 's/ident/trust/' >test && sudo mv test $hbapath
		sudo service postgresql restart
	
		sudo createdb OPENCDR -U postgres
}

install_php()
{
	echo "Installing php"
	sudo yum -y install php php-mysql php-pgsql.x86_64
	
	sudo sed 's/upload_max_filesize = 2M/upload_max_filesize = 50M/' </etc/php.ini >test && sudo mv test /etc/php.ini
	sudo sed 's/display_errors = Off/display_errors = On/' </etc/php.ini >test && sudo mv test /etc/php.ini
	
	sudo sed 's/Options Indexes/Options/g' </etc/httpd/conf/httpd.conf >test && sudo mv test /etc/httpd/conf/httpd.conf
	sudo sed 's/DirectoryIndex/DirectoryIndex main.php/g' </etc/httpd/conf/httpd.conf >test && sudo mv test /etc/httpd/conf/httpd.conf
	sudo service httpd restart
}
install_tables(){
        echo "Installing tables"
        psql OPENCDR -U postgres -W -f ~/opencdr/Tables/Tables.sql
}
install_views(){
        echo "Installing views"
        psql OPENCDR -U postgres -W -f ~/opencdr/Views/Views.sql
}
install_functions(){
        echo "Installing functions"
        psql OPENCDR -U postgres -W -f ~/opencdr/Functions/Functions.sql
}
install_opencdr(){
	cd /var/www/html/
	sudo mkdir Shared
	cd ~/opencdr
	sudo cp -r PHP\ Admin\ Portal/* /var/www/html/
	sudo cp -r Shared/* /var/www/html/Shared/
	
	sudo chmod 777 /var/www/html/Shared/conf/opencdr.conf
	sudo chmod 777 /var/www/html/files/queryresult.csv
}


installed='\e[0;32mINSTALLED\e[0m'
not='\e[0;31mNOT INSTALLED\e[0m'
unknown='UNKNOWN'

check_httpd_installed(){
	httpd_installed=$unknown
	
        httpd_path=`command -v httpd`
        if [ "$httpd_path" == "" ]; then
                httpd_installed=$not
        else
                httpd_installed=$installed
        fi

}
check_postgres_installed(){
	postgres_installed=$unknown

        postgres_path=`command -v psql`
        if [ "$postgres_path" == "" ]; then
                postgres_installed=$not
        else
                postgres_installed=$installed
        fi

}
check_php_installed(){
	php_installed=$unknown

        php_path=`command -v php`
        if [ "$php_path" == "" ]; then
                php_installed=$not
        else
                php_installed=$installed
        fi
}
check_git_installed(){
        git_installed=$unknown

        git_path=`command -v git`
        if [ "$git_path" == "" ]; then
                git_installed=$not
        else
                git_installed=$installed
        fi
}

check_pgsql_installed(){
	pgsql_installed=$unknown
}

get_number_of_tables(){
	if [ "$postgres_installed" == "$installed" ]; then
		numTables=`psql OPENCDR -U postgres -c "SELECT count(table_name) from information_schema.tables WHERE table_type = 'BASE TABLE' AND table_schema = 'public';" | sed -n 3p | sed 's/ //g'`
	else
		numTables=0
	fi
}
get_number_of_views(){
	if [ "$postgres_installed" == "$installed" ]; then
		numViews=`psql OPENCDR -U postgres -c "SELECT count(table_name) from information_schema.views WHERE table_schema = 'public';" | sed -n 3p | sed 's/ //g'`
	else
		numViews=0
	fi
}
get_number_of_funcs(){
	if [ "$postgres_installed" == "$installed" ]; then
		numFuncs=`psql OPENCDR -U postgres -c "SELECT count(routine_name) from information_schema.routines WHERE routine_schema = 'public';" | sed -n 3p | sed 's/ //g'`
	else
		numFuncs=0
	fi
}
print_menu(){

	check_httpd_installed
	check_postgres_installed
	check_php_installed
	check_pgsql_installed
	check_git_installed
	get_number_of_tables
	get_number_of_views
	get_number_of_funcs
	
	clear
	echo "Please install the following in the correct order : "
	echo -e "1. Install git :			[${git_installed}]"
	echo -e "2. Install then enable httpd 		[${httpd_installed}]"
	echo -e "3. Install then setup postgres		[${postgres_installed}]"
	echo -e "4. Install php				[${php_installed}]"
	echo -e "5. Download/Install Opencdr"
	echo -e "Tables: [${numTables}]/42		Views: [${numViews}]/6		Functions: [${numFuncs}]/21"
	echo -n "Please choose an option then press enter [1-5, q]: "
}
print_menu
read option

while [ true ] ; do
	if   [ "$option" == "1" ]; then
                install_git
    elif [ "$option" == "2" ]; then
            install_httpd
	elif [ "$option" == "3" ]; then
		install_postgres
	elif [ "$option" == "4" ]; then
		install_php
	elif [ "$option" == "5" ]; then
		download_opencdr
		install_opencdr
        install_tables
        install_views
        install_functions
	else
		echo "Quitting..."
		break
	fi
	echo -n "Press any key to continue."
	read anykey

	print_menu
	read option
done
